#!/bin/ruby

require "./Utilities.rb"
require "./Parameters.rb"

n, k, d = Parameters.parseParameters(ARGV)

def poissonDistribution(lambda, k)
    return (Math.exp(-lambda) * lambda ** k) / Utilities.factorial(k)
end

def binomialDistribution(n, k, p)
    return Utilities.combinations(n, k) * p**k * (1.0 - p)**(n - k)
end

if d != 0
    puts "Binomial distribution:"
    values = []
    for i in 0..50
        value = binomialDistribution(d, i, 1.0 / 25.0)
        values << value
        printf("#{i} -> %.3f", value)
        if i == 50
            puts
            break
        elsif (i + 1) % 6 != 0
            print "\t"
        else
            puts
        end
    end
    printf("overload: %.1f%%\n", 0)
    printf("computation time: %.2f ms\n", 0)

    puts

    puts "Poisson distribution:"
    values = []
    for i in 0..50
        value = poissonDistribution(d, i)
        values << value
        printf("#{i} -> %.3f", value)
        if i == 50
            puts
            break
        elsif (i + 1) % 6 != 0
            print "\t"
        else
            puts
        end
    end
    printf("overload: %.1f%%\n", 0)
    printf("computation time: %.2f ms\n", 0)
else
    puts("#{k}-combination of a #{n} set:")
    puts(Utilities.combinations(n, k))
end
exit(0)
